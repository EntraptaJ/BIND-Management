# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ACMEAccount {
  email: String!
  domainName: String!
  domains: [String!]!
  Certificate: Certificate!
}

"""BIND9 Zone types"""
enum autoDNSSEC {
  off
  allow
  maintain
}

interface BaseBINDZONEConfig {
  name: String!
  type: ZoneType!
  file: String!
  autoDNSSEC: autoDNSSEC
  inlineSigning: Boolean
  keyDirectory: String
  allowTransfer: [String]
  alsoNotify: [String]
  notify: Boolean
}

type Certificate {
  updatedDate: DateTime!
  certificate: String!
  privKey: String!
}

type Config {
  """BIND9 Keys"""
  keys: [KeyConfig]
  zones: [ZoneConfig]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteZoneInput {
  domainName: String!
}

type DeleteZoneMutationResponse implements MutationResponse {
  success: Boolean!
}

input GetLastUpdatedInput {
  domainName: String!
}

input InitialSettingsInput {
  appName: String!
  username: String!
  password: String!
  publicNSHostname: String!
}

interface Key {
  name: String!
  secret: String!
  algorithm: TSIGALGORITHM!
}

type KeyConfig implements Key {
  name: String!
  secret: String!
  algorithm: TSIGALGORITHM!
}

type LoginUserMutationResponse implements MutationResponse {
  success: Boolean!
  token: String!
  role: [UserRole!]!
}

type Mutation {
  newACME(input: NewACMEInput!): ACMEAccount!
  updateACME(input: UpdateACMEInput!): ACMEAccount!
  registerUser(user: NewUserInput!): User!

  """Log User into API"""
  loginUser(password: String!, username: String!): LoginUserMutationResponse!
  saveInitialSettings(input: InitialSettingsInput!): Boolean!

  """Creates a new zone under the users account."""
  newZone(input: NewZone!): Zone!

  """Adds a new value RR"""
  newRR(input: NewRR!): Zone!

  """Updates an RR Record"""
  updateRR(input: RRUpdateInput!): Zone!
  deleteZone(input: DeleteZoneInput!): DeleteZoneMutationResponse!
}

interface MutationResponse {
  success: Boolean!
}

input NewACMEInput {
  email: String!
  subDomains: [String!]!
  domainName: String!
}

input NewRR {
  domainName: String!
  RR: ValueRRRecordInput!
  type: ValueRRType!
}

input NewUserInput {
  username: String!
  password: String!
}

input NewZone {
  domainName: String!
}

type Query {
  getLastUpdated(input: GetLastUpdatedInput!): DateTime!
  ACMECert(input: GetLastUpdatedInput!): ACMEAccount!
  userCheck: UserCheck!
  User(id: String!): User!
  users(username: String = ""): [User!]!

  """Admin only. returns the named.conf for the NS server"""
  getConfig: Config!
  getSetupCompleted(secret: String): Boolean!
  getSettings(secret: String): Setting

  """Returns all Zones the user has access to"""
  Zones: [Zone!]!
  Zone(zoneName: String!): Zone!
}

"""Base BIND9 Resource Record Class"""
interface ResourceRecord {
  host: String!
  ttl: Int
}

"""Value Record Class"""
type RRStuff implements ResourceRecord {
  host: String!
  ttl: Int
  value: String!
  type: ValueRRType!
}

input RRUpdateInput {
  domainName: String!
  type: ValueRRType!
  oldRR: ValueRRRecordInput!
  newRR: ValueRRRecordInput
}

type Setting {
  appName: String
}

"""
Start of Authority. Defines the zone name, an e-mail contact and various time
and refresh values applicable to the zone.
http://www.zytrax.com/books/dns/ch8/soa.html
"""
type SOA {
  contact: String!
  serial: String!
  refresh: String!
  retry: String!
  expire: String!
  mttl: String!
}

"""SRV Record Class"""
type SRVRR implements ResourceRecord {
  host: String!
  ttl: Int
  service: String!
  protocol: String!
  priority: Int!
  weight: Int!
  port: Int!
  target: String!
}

type SSLCertificateRes {
  certificate: String!
  privKey: String!
}

type Subscription {
  ACME(domainName: String!): ACMEAccount!
}

"""BIND9 TSIG Algroithms"""
enum TSIGALGORITHM {
  MD5
  SHA1
  SHA224
  SHA256
  SHA384
  SHA512
}

input UpdateACMEInput {
  domainName: String!
  subDomains: [String!]!
}

type User {
  _id: String!
  username: String!
}

enum UserAccess {
  READ
  WRITE
  ADMIN
}

type UserCheck {
  isAuthed: Boolean!
  role: [UserRole!]!
}

enum UserRole {
  User
  Admin
  Guest
}

"""Value Record Class"""
type ValueRR implements ResourceRecord {
  host: String!
  ttl: Int
  value: String!
}

input ValueRRRecordInput {
  host: String!
  value: String!

  """
  32 bit value. The Time to Live in seconds (range is 1 to 2147483647) and
  indicates how long the RR may be cached. The value zero indicates the data
  should not be cached.
  """
  ttl: Float
}

"""BIND9 Value Record RR Types"""
enum ValueRRType {
  A
  TXT
  NS
  AAAA
  CNAME
  DNAME
  PTR
}

"""BIND9 ZoneFile http://www.zytrax.com/books/dns/ch8/"""
type Zone {
  """BIND9 ZoneFile Origin"""
  origin: String!

  """
  Start of Authority. Defines the zone name, an e-mail contact and various time
  and refresh values applicable to the zone.
  http://www.zytrax.com/books/dns/ch8/soa.html
  """
  SOA: SOA!
  NS: [ValueRR!]!
  RRs: [RRStuff!]!

  """
  IPv4 Address record. An IPv4 address for a host.  http://www.zytrax.com/books/dns/ch8/a.html
  """
  A: [ValueRR]
  TXT: [ValueRR]

  """
  Defines services available in the zone, for example, ldap, http, sip etc..
  Allows for discovery of domain servers providing specific services..
  http://www.zytrax.com/books/dns/ch8/srv.html
  """
  SRV: [SRVRR]

  """Domain name for the ZoneFile"""
  domain: String!

  """Admin Authorization only"""
  zoneFile: String!
  userPermission: UserAccess!
}

type ZoneConfig implements BaseBINDZONEConfig {
  name: String!
  type: ZoneType!
  file: String!
  autoDNSSEC: autoDNSSEC
  inlineSigning: Boolean
  keyDirectory: String
  allowTransfer: [String]
  alsoNotify: [String]
  notify: Boolean
}

"""BIND9 Zone types"""
enum ZoneType {
  master
  slave
  stub
  forward
  hint
}
